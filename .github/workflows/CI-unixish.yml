name: CI-unixish

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
 
   strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false # not worthwhile...

   runs-on: ${{ matrix.os }}

   steps:
      - uses: actions/checkout@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
    
      - name: Install missing software on ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
            sudo apt-get update
            sudo apt-get install extra-cmake-modules libkf5archive-dev libkf5coreaddons-dev libkf5doctools-dev libkf5widgetsaddons-dev libkf5xmlgui-dev libkf5i18n-dev libkf5config-dev gettext kio-dev

      - name: Install missing software on macos
        if: matrix.os == 'macos-latest'
        run: |
          brew install kde-extra-cmake-modules kf5-karchive

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source 
        # and build directories, but this is only available with CMake 3.13 and higher.  
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE
